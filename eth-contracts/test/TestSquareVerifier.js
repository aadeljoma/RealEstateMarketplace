// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const Verifier = artifacts.require("Verifier");

const data = require("../../zokrates/code/square/proof.json");
const proof = data.proof;
const inputs = data.inputs;

contract("TestSquareVerifier", accounts => {
  const account_one = accounts[0];

  beforeEach(async () => {
    this.contract = await Verifier.new({ from: account_one });
  });

  // Test verification with correct proof
  // - use the contents from proof.json generated from zokrates steps
  it("Verification with correct proof", async () => {
    const isVerified = await this.contract.verifyTx.call(
      proof.a,
      proof.b,
      proof.c,
      inputs,
      { from: account_one }
    );

    assert.equal(isVerified, true, "Invalid Verification!");
  });

  // Test verification with incorrect proof
  it("Verification with incorrect proof", async () => {
    const invalidProof_c = [
      "23137e883aad15770beb00xc4febaf00c915da4f56b4d5f0efa0ccbf8cb85df38",
      "cc947155c2298bc3ce2ec463c7a3a8634e90x2fb92f5e02ceb3f0c20cb085d00ba"
    ];
    const isVerified = await this.contract.verifyTx.call(
      proof.a,
      proof.b,
      invalidProof_c,
      inputs,
      { from: account_one }
    );

    assert.equal(isVerified, false, "Verification shouldn't be valid");
  });
});
